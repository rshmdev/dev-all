import Head from "next/head";
import styles from "@/styles/Home.module.css";
import search from "../../public/assets/search.svg";
import Image from "next/image";
import { useEffect, useState } from "react";
import api from "@/services/api";
import Card from "@/components/posts_card";
import Footer from "@/components/footer";
import Header from "@/components/header";

import { toast, ToastContainer } from "react-toastify";

export default function Home() {
  const [posts, setPosts] = useState([]);
  const [page, setPage] = useState(1);
  const [searchInput, setSearchInput] = useState("");
  const [updatedItens, setUpdatedItens] = useState([]);
  const [displayMode, setDisplayMode] = useState("all");

  const getPosts = async (page) => {
    try {
      const response = await api.get(`/post?page=${page}`);
      return response.data;
    } catch (error) {
      toast.error("Erro ao carregar postagens");
    }
  };
  const loadMorePosts = async () => {
    try {
      const newPosts = await getPosts(page + 1);
      setPage(page + 1);
      setPosts((prevPosts) => [...prevPosts, ...newPosts]);
      setDisplayMode("all");
    } catch {
      toast.error("Erro ao carregar novas postagens");
    }
  };

  useEffect(() => {
    loadMorePosts();
  }, []);

  const handleScrollToTop = () => {
    window.scrollTo({
      top: 0,
    });
  };

  const searchPost = async () => {
    try {
      const response = await api.get(`/post?search=${searchInput}`);
      setUpdatedItens(response.data);
      setDisplayMode("search");
      setSearchInput("");
    } catch {
      toast.error("Erro ao realizar busca");
    }
  };

  function handleSubmit() {
    searchPost();
  }

  useEffect(() => {
    const scrollListener = () => {
      const scrollY = window.scrollY;

      if (scrollY > 300) {
        document.getElementById("backToTop").style.display = "block";
      } else {
        document.getElementById("backToTop").style.display = "none";
      }
    };

    window.addEventListener("scroll", scrollListener);

    return () => {
      window.removeEventListener("scroll", scrollListener);
    };
  }, []);

  const onChangeHandler = (event) => {
    setSearchInput(event.target.value);
  };

  return (
    <>
      <Head>
        <title>dev/All</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <Header />
      <main className={`${styles.main} `}>
        <section className={styles.top_info}>
          <label className={styles.input_label} htmlFor="busca">
            Explore um oceano de conhecimento em tecnologia!
          </label>
          <div className={styles.input_with_icon}>
            <Image
              style={{
                position: "absolute",
                right: "0.8rem",
                top: "0.2rem",
                cursor: "pointer",
              }}
              src={search}
              width={30}
              onClick={handleSubmit}
              alt="Botão para realizar busca"
            />
            <input
              className={styles.input_search}
              id="busca"
              name="busca"
              onKeyDown={(event) => {
                if (event.key === "Enter") {
                  handleSubmit();
                }
              }}
              value={searchInput}
              onChange={onChangeHandler}
              placeholder="Faça sua busca"
            />
          </div>
        </section>

        <section className={styles.card_section}>
          {displayMode === "all" &&
            posts.map((post, idx) => <Card key={idx} post={post} />)}

          {displayMode === "search" &&
            updatedItens?.map((result, idx) => (
              <Card key={idx} post={result} />
            ))}

          {updatedItens.length < 1 && (
            <h2 style={{ color: "#fff", fontSize: "2rem" }}>
              Nenhum resultado encontrado
            </h2>
          )}
        </section>

        {updatedItens.length > 0 && (
          <button className={styles.load_more} onClick={loadMorePosts}>
            Carregar mais postagens
          </button>
        )}

        <button
          id="backToTop"
          onClick={() => handleScrollToTop()}
          className={styles.scroll_to_top}
        >
          {" "}
          🔝
        </button>
      </main>
      <Footer />

      <ToastContainer
        position="top-right"
        autoClose={5000}
        hideProgressBar={false}
        newestOnTop={false}
        closeOnClick
        rtl={false}
        pauseOnFocusLoss
        draggable
        pauseOnHover
        theme="light"
      />
    </>
  );
}
